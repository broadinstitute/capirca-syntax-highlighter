{
  "fileTypes": [
    "pol",
    "svc",
    "net",
    "inc"
  ],
  "name": "Capirca",
  "patterns": [
    {
      "begin": "(^[ \\t]+)?(?=#(?!include))",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.comment.leading.capirca"
        }
      },
      "end": "(?!\\G)",
      "patterns": [
        {
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.capirca"
            }
          },
          "end": "\\n",
          "name": "comment.line.number-sign.capirca"
        }
      ]
    },
    {
      "match": "^(?:\\s+)?((?:file-)?comment\\:\\: ?.*)",
      "name": "comment.line.number.capirca"
    },
    {
      "begin": "#include",
      "end": "\\n",
      "name": "string.quoted.capirca"
    },
    {
      "captures": {
        "1": {
          "name": "support.function.capirca"
        },
        "2": {
          "name": "keyword.operator.capirca"
        }
      },
      "match": "^(?:\\s+)?((?:protocol(?:-except)?|option|action|counter|logging|(?:source|destination)-(?:port|address|exclude)|target|verbatim|platform-exclude|platform))(::)"
    },
    {
      "captures": {
        "1": {
          "name": "support.function.capirca"
        },
        "2": {
          "name": "keyword.operator.capirca"
        }
      },
      "match": "^(?:\\s+)?((?:dscp-match|owner|address|logging))(::)"
    },
    {
      "captures": {
        "1": {
          "name": "support.function.capirca"
        },
        "2": {
          "name": "keyword.operator.capirca"
        }
      },
      "match": "^(?:\\s+)?((?:address|application|apply-groups|counter|(?:source|destination)-(?:prefix(?:-except)?|tag)|dscp-(?:match|except|set)|ether-type|fragment-offset|flexible-match-range|forwarding-class(?:-except)?|hop-limit|icmp-type|logging|loss-priority|next-ip|owner|packet-length|precedence|policer|port|qos|routing-instance|(?:source|destination)-interface|timeout|traffic-(?:type|class-count)|vpn))(::)"
    },
    {
      "captures": {
        "1": {
          "name": "support.function.capirca"
        },
        "2": {
          "name": "keyword.operator.capirca"
        }
      },
      "match": "^(?:\\s+)?((?:name|pan-application|translated|export-log))(::)"
    },
    {
      "captures": {
        "1": {
          "name": "support.function.capirca"
        },
        "2": {
          "name": "keyword.operator.capirca"
        }
      },
      "match": "^(?:\\s+)?((?:(?:source|destination)-domain(?:-regex)?|urlpath-regex|method))(::)"
    },
    {
      "captures": {
        "0": {
          "name": "constant.language.capirca"
        }
      },
      "match": "(?<=method::)\\s*((?:GET|get|POST|post|HEAD|head|PUT|put|DELETE|delete|OPTIONS|options|CONNECT|connect)\\b\\s?)+",
      "name": ""
    },
    {
      "captures": {
        "1": {
          "name": "constant.language.capirca"
        }
      },
      "match": "(?<=option::)\\s*(established|tcp-established|sample|(?:tcp-)?initial|(first|is)-fragment|(?:source|destination)-is-user|negate|syn|ack|fin|rst|urg|psh|all|none)",
      "name": ""
    },
    {
      "captures": {
        "1": {
          "name": "constant.language.capirca"
        }
      },
      "match": "(?<=action::)\\s*(accept|next|dscp|log|count)",
      "name": ""
    },
    {
      "captures": {
        "1": {
          "name": "constant.language.capirca"
        }
      },
      "match": "(?<=target::|platform::|platform-exclude::)\\s*(arista|aruba|brocade|cisco(?:-?xr|-xe|asa)?|gce|ipset|(?:ip|nf)tables|juniper(?:qfx)?|nsxv|panfw|paloalto|pcap|speedway|srx(?:lo)?|squid|vshield|windows(?:_advfirewall|_ipsec)?)",
      "name": ""
    },
    {
      "captures": {
        "1": {
          "name": "constant.language.capirca"
        }
      },
      "match": "(?<=logging::)\\s*(true)",
      "name": ""
    },
    {
      "captures": {
        "0": {
          "name": "constant.language.capirca"
        }
      },
      "match": "(?<=protocol::)\\s*((\\d\\d?|1\\d\\d|2[0-5][0-5]|ah|egp|esp|fragment|ggp|gre|icmp(?:v6)?|igmp|igp|ipencap|ipip|ipv6(?:-frag|-nonxt|-opts|-route)?|l2tp|ospf|pim|rdp|rsvp|sctp|tcp|udp|vrrp)\\s*)+(?:\\n|#|})",
      "name": ""
    },
    {
      "captures": {
        "1": {
          "name": "variable.language.capirca"
        }
      },
      "match": "(?<=counter::|qos::|policer::|source-port::|destination-port::|source-address::|destination-address::|source-prefix::|destination-prefix::|source-exclude::|destination-exclude::)\\s*([\\w\\-\\.\\s]+)(?=\\n|#|})",
      "name": ""
    },
    {
      "begin": "^\\s*(term)\\s+([\\w\\-\\.]+) ?",
      "beginCaptures": {
        "1": {
          "name": "storage.type.capirca"
        },
        "2": {
          "name": "entity.name.function.capirca"
        }
      },
      "end": "{",
      "name": "meta.function.capirca"
    },
    {
      "begin": "^\\s*(header)(\\s+)?",
      "beginCaptures": {
        "1": {
          "name": "storage.type.capirca"
        }
      },
      "end": "{",
      "name": "meta.function.capirca"
    },
    {
      "captures": {
        "1": {
          "name": "invalid.illegal.capirca"
        }
      },
      "match": "(?<=action::)(?:\\s*)(deny|reject(-with-tcp-rst)?)",
      "name": ""
    },
    {
      "captures": {
        "1": {
          "name": "invalid.illegal.capirca"
        },
        "2": {
          "name": "keyword.operator.capirca"
        }
      },
      "match": "\\b(expiration)(::)",
      "name": ""
    },
    {
      "captures": {
        "1": {
          "name": "variable.language.capirca"
        },
        "2": {
          "name": "keyword.operator.capirca"
        }
      },
      "match": "^\\s*([\\w\\-\\.]+)\\s*(=)",
      "name": "meta.function.capirca"
    },
    {
      "match": "\\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))([/]\\d{1,2})?\\b",
      "name": "constant.numeric.integer.long.octal.capirca"
    },
    {
      "comment": "This will not fully validate the structure of the IP, so some invalid IPv6 addresses might be false positives.",
      "match": "(?:\\b)((?=.*::)(?!.*::.+::)(::)?([\\dA-Fa-f]{1,4}:(:|\\b)|){5}|([\\dA-Fa-f]{1,4}:){6})((([\\dA-Fa-f]{1,4}(::|:\\b|[/]\\d+|))|(?!\\3\\4)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?){4})([/]\\d{1,3})?(?:\\s)",
      "name": "constant.numeric.integer.long.octal.capirca"
    }
  ],
  "scopeName": "source.capirca"
}
